CCS PCM C Compiler, Version 4.128, 51913               08-Oct-15 19:26

               Filename: D:\Projects\EAR\Firmware\12F1822\Main_Code_Tap_Tempo_12F1822_V2\main.lst

               ROM used: 1762 words (86%)
                         Largest free fragment is 285
               RAM used: 51 (40%) at main() level
                         112 (88%) worst case
               Stack:    3 worst case (2 in main + 1 for interrupts)

*
0000:  MOVLP  00
0001:  GOTO   54C
0002:  NOP
*
0004:  CLRF   03
0005:  CLRF   0A
0006:  MOVLB  00
0007:  MOVF   20,W
0008:  MOVWF  24
0009:  MOVF   21,W
000A:  MOVWF  25
000B:  MOVF   22,W
000C:  MOVWF  26
000D:  MOVF   23,W
000E:  MOVWF  27
000F:  CLRF   05
0010:  MOVLW  91
0011:  MOVWF  04
0012:  BTFSS  00.1
0013:  GOTO   016
0014:  BTFSC  11.1
0015:  GOTO   07C
0016:  CLRF   05
0017:  MOVLW  91
0018:  MOVWF  04
0019:  BTFSS  00.2
001A:  GOTO   01D
001B:  BTFSC  11.2
001C:  GOTO   08F
001D:  MOVF   24,W
001E:  MOVWF  20
001F:  MOVF   25,W
0020:  MOVWF  21
0021:  MOVF   26,W
0022:  MOVWF  22
0023:  MOVF   27,W
0024:  MOVWF  23
0025:  RETFIE
.................... //This is the main working code for the TapTempo Project 
.................... //It was delievered 10/6/2015 and said to be AWESOME 
.................... //Time line of changes follow below... 
.................... //10/8/2015 made commit to github 
....................  
.................... #include <12f1822.h> 
.................... //////// Standard Header file for the PIC12F1822 device //////////////// 
.................... #device PIC12F1822 
.................... #list 
....................  
.................... #fuses INTRC_IO,NOWDT,NOPROTECT,NOMCLR,NOCLKOUT,PLL_SW,NOLVP 
.................... #DEVICE ADC=10 
.................... #use delay(clock=2000000) 
.................... #use rs232(baud=9600, UART2, ERRORS) 
.................... #use i2c(master, sda=PIN_A2, scl=PIN_A1, FORCE_HW, FAST) 
*
00C3:  MOVLB  04
00C4:  BCF    15.7
00C5:  MOVLB  00
00C6:  BCF    11.3
00C7:  MOVF   45,W
00C8:  MOVLB  04
00C9:  MOVWF  11
00CA:  MOVLW  02
00CB:  BTFSC  15.7
00CC:  GOTO   0D4
00CD:  MOVLB  00
00CE:  BTFSS  11.3
00CF:  GOTO   0CE
00D0:  MOVLW  00
00D1:  MOVLB  04
00D2:  BTFSC  16.6
00D3:  MOVLW  01
00D4:  MOVLB  00
00D5:  MOVWF  21
00D6:  RETURN
.................... #byte APFCON=getenv("SFR:APFCON") //This is the register to move pins around 
....................  
....................  
.................... #include <MCP4725.c> 
.................... /* 
.................... * MCP4725 Library 
.................... * Eric Daine 
.................... *  
.................... */ 
....................  
....................  
.................... #include <MCP4725.h> 
.................... /* 
.................... * MCP4725 Library 
.................... * Adapted from Adafruit Library 
.................... * Eric Daine 
.................... *  
.................... */ 
....................  
....................  
.................... #define MCP4725_CMD_WRITEDAC            (0x40)  // Writes data to the DAC 
.................... #define MCP4725_CMD_WRITEDACEEPROM      (0x60)  // Writes data to the DAC and the EEPROM (persisting the assigned value after reset) 
....................  
.................... int8 DAC_address; 
....................  
....................  
.................... //Declare thy prototypes 
.................... void begin(int8 a);   
.................... void setVoltage( int16 output, int1 writeEEPROM ); 
....................  
....................  
....................  
....................  
....................  
....................  
....................  
.................... /**************************************************************************/ 
.................... /*!  
....................     @brief  Sets the output voltage to a fraction of source vref.  (Value 
....................             can be 0..4095) 
....................  
....................     @param[in]  output 
....................                 The 12-bit value representing the relationship between 
....................                 the DAC's input voltage and its output voltage. 
....................     @param[in]  writeEEPROM 
....................                 If this value is true, 'output' will also be written 
....................                 to the MCP4725's internal non-volatile memory, meaning 
....................                 that the DAC will retain the current voltage output 
....................                 after power-down or reset. 
.................... */ 
.................... /**************************************************************************/ 
.................... void setVoltage( int16 output, int1 writeEEPROM ) 
.................... { 
....................    //disable_interrupts(GLOBAL);  
....................    i2c_start(); 
00D7:  MOVLB  04
00D8:  BSF    16.0
00D9:  BTFSC  16.0
00DA:  GOTO   0D9
....................    i2c_write(DAC_address); 
00DB:  MOVLB  00
00DC:  MOVF   29,W
00DD:  MOVWF  45
00DE:  CALL   0C3
....................     
....................   if (writeEEPROM) 
00DF:  MOVF   42,F
00E0:  BTFSC  03.2
00E1:  GOTO   0E6
....................   { 
....................     i2c_write(MCP4725_CMD_WRITEDACEEPROM); 
00E2:  MOVLW  60
00E3:  MOVWF  45
00E4:  CALL   0C3
....................   } 
....................   else 
00E5:  GOTO   0E9
....................   { 
....................     i2c_write(MCP4725_CMD_WRITEDAC); 
00E6:  MOVLW  40
00E7:  MOVWF  45
00E8:  CALL   0C3
....................   } 
....................   i2c_write(output / 16);                   // Upper data bits          (D11.D10.D9.D8.D7.D6.D5.D4) 
00E9:  RRF    41,W
00EA:  MOVWF  44
00EB:  RRF    40,W
00EC:  MOVWF  43
00ED:  RRF    44,F
00EE:  RRF    43,F
00EF:  RRF    44,F
00F0:  RRF    43,F
00F1:  RRF    44,F
00F2:  RRF    43,F
00F3:  MOVLW  0F
00F4:  ANDWF  44,F
00F5:  MOVF   43,W
00F6:  MOVWF  45
00F7:  CALL   0C3
....................   i2c_write((output % 16) << 4);            // Lower data bits          (D3.D2.D1.D0.x.x.x.x) 
00F8:  MOVF   40,W
00F9:  ANDLW  0F
00FA:  MOVWF  43
00FB:  CLRF   44
00FC:  RLF    43,F
00FD:  RLF    44,F
00FE:  RLF    43,F
00FF:  RLF    44,F
0100:  RLF    43,F
0101:  RLF    44,F
0102:  RLF    43,F
0103:  RLF    44,F
0104:  MOVLW  F0
0105:  ANDWF  43,F
0106:  MOVF   43,W
0107:  MOVWF  45
0108:  CALL   0C3
....................   i2c_stop();  
0109:  MOVLB  04
010A:  BSF    16.2
010B:  BTFSC  16.2
010C:  GOTO   10B
....................   //enable_interrupts(GLOBAL); 
....................    
.................... } 
010D:  MOVLB  00
010E:  RETURN
....................  
....................  
....................  
....................  
.................... //#include <math.h> 
....................  
.................... //Variable Declaration 
.................... int1 got_pulse_width, first_press, mode; 
.................... int16 ccp_delta, overflow,pot_val,pot_save; 
.................... int32 pulse_width_ms; 
....................  
.................... const int16 millisecond_delay[21] = {842,836,821,794,763,728,692,653,612,570,524,478,427,374,318,257,195,127,77,57,47}; 
.................... const int16 dac_out[21] = {0,206,414,622,824,1035,1235,1442,1647,1850,2059,2260,2468,2671,2875,3080,3285,3490,3695,3899,4096}; 
.................... int16 calculated_voltage; 
.................... int8 LUT_count; 
....................  
....................  
....................  
....................  
....................  
....................   
.................... //Timer2 interrupts every ms basically just handles overflow condition 
.................... //Stops counting up at 1000 to prevent eventually filling the overflow  
.................... //variable and rolling over back to 0 causing confusion 
.................... #int_timer2 
.................... void timer2_isr(void) 
.................... { 
.................... if (overflow < 1000){ 
*
007C:  MOVF   2E,W
007D:  SUBLW  03
007E:  BTFSS  03.0
007F:  GOTO   08A
0080:  BTFSS  03.2
0081:  GOTO   086
0082:  MOVF   2D,W
0083:  SUBLW  E7
0084:  BTFSS  03.0
0085:  GOTO   08A
....................    overflow = overflow + 1; 
0086:  MOVLW  01
0087:  ADDWF  2D,F
0088:  MOVLW  00
0089:  ADDWFC 2E,F
....................    } 
....................     
.................... clear_interrupt(int_timer2);// clear timer2 interrupt's flag  
008A:  MOVF   07,W
008B:  BCF    11.1
.................... } 
....................  
008C:  BCF    11.1
008D:  MOVLP  00
008E:  GOTO   01D
.................... #int_ccp1  
.................... void ccp1_isr(void)  
.................... {  
.................... static int16 t1_falling_edge; 
*
056B:  MOVLB  00
056C:  CLRF   3A
056D:  CLRF   3B
.................... if (overflow >= 900) //Set Overflow at 900ms can actually count to 1048 
*
008F:  MOVF   2E,W
0090:  SUBLW  02
0091:  BTFSC  03.0
0092:  GOTO   09C
0093:  XORLW  FF
0094:  BTFSS  03.2
0095:  GOTO   09A
0096:  MOVF   2D,W
0097:  SUBLW  83
0098:  BTFSC  03.0
0099:  GOTO   09C
....................    { 
....................    first_press = TRUE; //Restart the Tap Train on next falling edge 
009A:  BSF    2A.1
....................    got_pulse_width = FALSE; //Don't report pulse width if overflow 
009B:  BCF    2A.0
....................    //tap_return = TRUE; 
....................    } 
.................... if(first_press)  
009C:  BTFSS  2A.1
009D:  GOTO   0AB
....................   {  
....................    overflow = 0; //Reset the Overflow 
009E:  CLRF   2E
009F:  CLRF   2D
....................    t1_falling_edge = CCP_1; //Capture the clock 
00A0:  MOVLB  05
00A1:  MOVF   12,W
00A2:  MOVLB  00
00A3:  MOVWF  3B
00A4:  MOVLB  05
00A5:  MOVF   11,W
00A6:  MOVLB  00
00A7:  MOVWF  3A
....................    got_pulse_width = FALSE; 
00A8:  BCF    2A.0
....................    first_press = FALSE; 
00A9:  BCF    2A.1
....................   }  
.................... else  
00AA:  GOTO   0C0
....................   { 
....................    ccp_delta = CCP_1 - t1_falling_edge; 
00AB:  MOVF   3A,W
00AC:  MOVLB  05
00AD:  SUBWF  11,W
00AE:  MOVLB  00
00AF:  MOVWF  2B
00B0:  MOVF   3B,W
00B1:  MOVLB  05
00B2:  SUBWFC 12,W
00B3:  MOVLB  00
00B4:  MOVWF  2C
....................    t1_falling_edge = CCP_1; //Re Capture the clock 
00B5:  MOVLB  05
00B6:  MOVF   12,W
00B7:  MOVLB  00
00B8:  MOVWF  3B
00B9:  MOVLB  05
00BA:  MOVF   11,W
00BB:  MOVLB  00
00BC:  MOVWF  3A
....................    overflow = 0; //Reset the Overflow 
00BD:  CLRF   2E
00BE:  CLRF   2D
....................    got_pulse_width = TRUE; 
00BF:  BSF    2A.0
....................   }  
....................  
.................... }  
....................  
....................  
00C0:  BCF    11.2
00C1:  MOVLP  00
00C2:  GOTO   01D
.................... double map(double value, float x_min, float x_max, float y_min, float y_max)     
.................... {                     
....................     return (y_min + (((y_max - y_min)/(x_max - x_min)) * (value - x_min)));  
*
02EE:  BSF    03.1
02EF:  MOVF   65,W
02F0:  MOVWF  6D
02F1:  MOVF   64,W
02F2:  MOVWF  6C
02F3:  MOVF   63,W
02F4:  MOVWF  6B
02F5:  MOVF   62,W
02F6:  MOVWF  6A
02F7:  MOVF   61,W
02F8:  MOVLB  01
02F9:  MOVWF  23
02FA:  MOVLB  00
02FB:  MOVF   60,W
02FC:  MOVLB  01
02FD:  MOVWF  22
02FE:  MOVLB  00
02FF:  MOVF   5F,W
0300:  MOVLB  01
0301:  MOVWF  21
0302:  MOVLB  00
0303:  MOVF   5E,W
0304:  MOVLB  01
0305:  MOVWF  20
0306:  MOVLB  00
0307:  CALL   16E
0308:  MOVF   20,W
0309:  MOVWF  66
030A:  MOVF   21,W
030B:  MOVWF  67
030C:  MOVF   22,W
030D:  MOVWF  68
030E:  MOVF   23,W
030F:  MOVWF  69
0310:  BSF    03.1
0311:  MOVF   5D,W
0312:  MOVWF  6D
0313:  MOVF   5C,W
0314:  MOVWF  6C
0315:  MOVF   5B,W
0316:  MOVWF  6B
0317:  MOVF   5A,W
0318:  MOVWF  6A
0319:  MOVF   59,W
031A:  MOVLB  01
031B:  MOVWF  23
031C:  MOVLB  00
031D:  MOVF   58,W
031E:  MOVLB  01
031F:  MOVWF  22
0320:  MOVLB  00
0321:  MOVF   57,W
0322:  MOVLB  01
0323:  MOVWF  21
0324:  MOVLB  00
0325:  MOVF   56,W
0326:  MOVLB  01
0327:  MOVWF  20
0328:  MOVLB  00
0329:  CALL   16E
032A:  MOVF   69,W
032B:  MOVWF  6D
032C:  MOVF   68,W
032D:  MOVWF  6C
032E:  MOVF   67,W
032F:  MOVWF  6B
0330:  MOVF   66,W
0331:  MOVWF  6A
0332:  MOVF   23,W
0333:  MOVLB  01
0334:  MOVWF  23
0335:  MOVLB  00
0336:  MOVF   22,W
0337:  MOVLB  01
0338:  MOVWF  22
0339:  MOVLB  00
033A:  MOVF   21,W
033B:  MOVLB  01
033C:  MOVWF  21
033D:  MOVLB  00
033E:  MOVF   20,W
033F:  MOVLB  01
0340:  MOVWF  20
*
0431:  MOVF   20,W
0432:  MOVWF  66
0433:  MOVF   21,W
0434:  MOVWF  67
0435:  MOVF   22,W
0436:  MOVWF  68
0437:  MOVF   23,W
0438:  MOVWF  69
0439:  BSF    03.1
043A:  MOVF   55,W
043B:  MOVWF  6D
043C:  MOVF   54,W
043D:  MOVWF  6C
043E:  MOVF   53,W
043F:  MOVWF  6B
0440:  MOVF   52,W
0441:  MOVWF  6A
0442:  MOVF   59,W
0443:  MOVLB  01
0444:  MOVWF  23
0445:  MOVLB  00
0446:  MOVF   58,W
0447:  MOVLB  01
0448:  MOVWF  22
0449:  MOVLB  00
044A:  MOVF   57,W
044B:  MOVLB  01
044C:  MOVWF  21
044D:  MOVLB  00
044E:  MOVF   56,W
044F:  MOVLB  01
0450:  MOVWF  20
0451:  MOVLB  00
0452:  CALL   16E
0453:  MOVF   69,W
0454:  MOVWF  6D
0455:  MOVF   68,W
0456:  MOVWF  6C
0457:  MOVF   67,W
0458:  MOVWF  6B
0459:  MOVF   66,W
045A:  MOVWF  6A
045B:  MOVF   23,W
045C:  MOVLB  01
045D:  MOVWF  23
045E:  MOVLB  00
045F:  MOVF   22,W
0460:  MOVLB  01
0461:  MOVWF  22
0462:  MOVLB  00
0463:  MOVF   21,W
0464:  MOVLB  01
0465:  MOVWF  21
0466:  MOVLB  00
0467:  MOVF   20,W
0468:  MOVLB  01
0469:  MOVWF  20
*
0510:  BCF    03.1
0511:  MOVF   61,W
0512:  MOVWF  6D
0513:  MOVF   60,W
0514:  MOVWF  6C
0515:  MOVF   5F,W
0516:  MOVWF  6B
0517:  MOVF   5E,W
0518:  MOVWF  6A
0519:  MOVF   23,W
051A:  MOVLB  01
051B:  MOVWF  23
051C:  MOVLB  00
051D:  MOVF   22,W
051E:  MOVLB  01
051F:  MOVWF  22
0520:  MOVLB  00
0521:  MOVF   21,W
0522:  MOVLB  01
0523:  MOVWF  21
0524:  MOVLB  00
0525:  MOVF   20,W
0526:  MOVLB  01
0527:  MOVWF  20
0528:  MOVLB  00
0529:  CALL   16E
.................... }  
052A:  MOVLP  00
052B:  GOTO   6CD (RETURN)
....................  
.................... //====================================  
.................... void main()  
.................... {  
*
054C:  CLRF   05
054D:  CLRF   04
054E:  MOVLW  1F
054F:  ANDWF  03,F
0550:  MOVLW  62
0551:  MOVLB  01
0552:  MOVWF  19
0553:  MOVLB  00
0554:  CLRF   28
0555:  MOVLW  0C
0556:  MOVLB  03
0557:  MOVWF  1B
0558:  MOVLW  A6
0559:  MOVWF  1E
055A:  MOVLW  90
055B:  MOVWF  1D
055C:  MOVLB  01
055D:  BSF    0C.1
055E:  BSF    0C.2
055F:  MOVLW  01
0560:  MOVLB  04
0561:  MOVWF  12
0562:  MOVLW  28
0563:  MOVWF  15
0564:  BCF    14.7
0565:  BCF    14.6
0566:  MOVLB  03
0567:  CLRF   0C
0568:  MOVLB  02
0569:  CLRF   12
056A:  CLRF   11
....................  
....................  
.................... int16 local_ccp_delta; 
.................... got_pulse_width = FALSE;  
*
056E:  BCF    2A.0
.................... first_press = TRUE; 
056F:  BSF    2A.1
....................  
.................... //DAC_address = 0xC4; //Address of the DAC don't ever forget this please 
.................... DAC_address = 0xC0; //I2C Address of parts with marking AJ 
0570:  MOVLW  C0
0571:  MOVWF  29
....................  
.................... //Oscillator Config 
....................  
.................... //setup_oscillator(OSC_8MHZ|OSC_INTRC|OSC_PLL_ON); //I am giving it all shes got, she can't take any more Captain 
.................... //setup_oscillator(OSC_500KHZ|OSC_INTRC|OSC_PLL_OFF);  //Can measure a little over 4 seconds with timer1 
.................... setup_oscillator(OSC_2MHZ|OSC_INTRC|OSC_PLL_OFF);  //Can measure a little over 1 second with timer1 Use this one 
0572:  MOVLW  62
0573:  MOVLB  01
0574:  MOVWF  19
....................  
.................... //Capture Compare Config 
.................... setup_CCP1(CCP_CAPTURE_FE); //Sets up Capture Compare for Falling Edge - Reads Tap Input 
0575:  MOVLB  02
0576:  BCF    1D.0
0577:  BCF    1D.1
0578:  MOVLB  01
0579:  BSF    0C.2
057A:  MOVLB  05
057B:  CLRF   13
057C:  MOVLW  04
057D:  MOVWF  13
057E:  CLRF   14
057F:  CLRF   15
0580:  BCF    1E.0
0581:  BCF    1E.1
0582:  MOVLW  01
0583:  MOVWF  16
.................... bit_set(APFCON,0); //Set CCP1 Pin to A5 instead of A2 
0584:  MOVLB  02
0585:  BSF    1D.0
....................  
.................... //ADC Config 
.................... SETUP_ADC(ADC_CLOCK_INTERNAL); 
0586:  MOVLB  01
0587:  BSF    1E.4
0588:  BSF    1E.5
0589:  BCF    1E.6
058A:  BSF    1E.7
058B:  BSF    1D.0
.................... SETUP_ADC_PORTS(sAN3); //Analog in on RA4 
058C:  BCF    1E.0
058D:  BCF    1E.1
058E:  MOVLW  10
058F:  MOVLB  03
0590:  MOVWF  0C
0591:  MOVLW  00
0592:  MOVWF  0E
.................... set_adc_channel(3); 
0593:  MOVLW  0C
0594:  MOVLB  00
0595:  MOVWF  21
0596:  MOVLB  01
0597:  MOVF   1D,W
0598:  ANDLW  83
0599:  MOVLB  00
059A:  IORWF  21,W
059B:  MOVLB  01
059C:  MOVWF  1D
.................... delay_us(10); 
059D:  GOTO   59E
059E:  GOTO   59F
059F:  NOP
....................  
....................  
....................  
.................... setup_timer_1(T1_INTERNAL | T1_DIV_BY_8 );  
05A0:  MOVLB  02
05A1:  BCF    1D.3
05A2:  MOVLW  35
05A3:  MOVLB  00
05A4:  MOVWF  18
05A5:  CLRF   19
.................... setup_timer_2(T2_DIV_BY_16 , 31, 1);  //Need a real understanding of what this lines does here 
05A6:  MOVLW  00
05A7:  MOVWF  21
05A8:  IORLW  06
05A9:  MOVWF  1C
05AA:  MOVLW  1F
05AB:  MOVWF  1B
.................... enable_interrupts(INT_CCP1); 
05AC:  MOVLB  01
05AD:  BSF    11.2
.................... enable_interrupts(INT_TIMER2); 
05AE:  BSF    11.1
.................... enable_interrupts(GLOBAL); 
05AF:  MOVLW  C0
05B0:  IORWF  0B,F
....................  
.................... //DAC Test Code 
.................... //setVoltage(4095, FALSE); //Sets DAC output to Max voltage 
.................... //setVoltage(0, FALSE);  
....................  
.................... mode = 1; //Start off in POT mode 
05B1:  MOVLB  00
05B2:  BSF    2A.2
....................  
.................... while(1)  
....................   {  
....................   pot_val = read_adc(); //Read the ADC everytime 
05B3:  MOVLB  01
05B4:  BSF    1D.1
05B5:  BTFSC  1D.1
05B6:  GOTO   5B5
05B7:  MOVF   1C,W
05B8:  MOVLB  00
05B9:  MOVWF  23
05BA:  MOVLB  01
05BB:  MOVF   1B,W
05BC:  MOVLB  00
05BD:  MOVWF  2F
05BE:  MOVF   23,W
05BF:  MOVWF  30
....................    
....................   if (mode == 1){ //We are in POT mode just set the value 
05C0:  BTFSS  2A.2
05C1:  GOTO   5D4
....................       pot_save = pot_val; 
05C2:  MOVF   30,W
05C3:  MOVWF  32
05C4:  MOVF   2F,W
05C5:  MOVWF  31
....................       setVoltage(pot_val * 4, FALSE); //scale to 12bit DAC 
05C6:  RLF    2F,W
05C7:  MOVWF  3E
05C8:  RLF    30,W
05C9:  MOVWF  3F
05CA:  RLF    3E,F
05CB:  RLF    3F,F
05CC:  MOVLW  FC
05CD:  ANDWF  3E,F
05CE:  MOVF   3F,W
05CF:  MOVWF  41
05D0:  MOVF   3E,W
05D1:  MOVWF  40
05D2:  CLRF   42
05D3:  CALL   0D7
....................   } 
....................    
....................   if (((pot_val > pot_save + 10 && mode ==0)) || ((pot_val < pot_save - 10) && (mode == 0))){ //We are in TAP mode only set voltage if POT moves a lot 
05D4:  MOVLW  0A
05D5:  ADDWF  31,W
05D6:  MOVWF  21
05D7:  MOVLW  00
05D8:  ADDWFC 32,W
05D9:  MOVWF  23
05DA:  MOVF   23,W
05DB:  SUBWF  30,W
05DC:  BTFSS  03.0
05DD:  GOTO   5E6
05DE:  BTFSS  03.2
05DF:  GOTO   5E4
05E0:  MOVF   2F,W
05E1:  SUBWF  21,W
05E2:  BTFSC  03.0
05E3:  GOTO   5E6
05E4:  BTFSS  2A.2
05E5:  GOTO   5FA
05E6:  MOVLW  0A
05E7:  SUBWF  31,W
05E8:  MOVWF  20
05E9:  MOVLW  00
05EA:  SUBWFC 32,W
05EB:  MOVWF  23
05EC:  MOVF   20,W
05ED:  MOVWF  21
05EE:  MOVF   30,W
05EF:  SUBWF  23,W
05F0:  BTFSS  03.0
05F1:  GOTO   5FB
05F2:  BTFSS  03.2
05F3:  GOTO   5F8
05F4:  MOVF   21,W
05F5:  SUBWF  2F,W
05F6:  BTFSC  03.0
05F7:  GOTO   5FB
05F8:  BTFSC  2A.2
05F9:  GOTO   5FB
....................       mode = 1; //Jump out of tap mode and enter pot mode 
05FA:  BSF    2A.2
....................   } 
....................   
....................     
....................    
....................   if(got_pulse_width)  
05FB:  BTFSS  2A.0
05FC:  GOTO   6E1
....................      {  
....................       disable_interrupts(GLOBAL);  
05FD:  BCF    0B.6
05FE:  BCF    0B.7
05FF:  BTFSC  0B.7
0600:  GOTO   5FE
....................       local_ccp_delta = ccp_delta;   
0601:  MOVF   2C,W
0602:  MOVWF  3D
0603:  MOVF   2B,W
0604:  MOVWF  3C
....................       enable_interrupts(GLOBAL); 
0605:  MOVLW  C0
0606:  IORWF  0B,F
....................        
....................       pulse_width_ms = local_ccp_delta / 62; //2E-6 per tick * 8 Prescale = 1.6E-5 so .001 / 1.6E-5 = 62.5  
0607:  MOVF   3D,W
0608:  MOVWF  3F
0609:  MOVF   3C,W
060A:  MOVWF  3E
060B:  CLRF   41
060C:  MOVLW  3E
060D:  MOVWF  40
060E:  GOTO   10F
060F:  CLRF   36
0610:  CLRF   35
0611:  MOVF   22,W
0612:  MOVWF  34
0613:  MOVF   21,W
0614:  MOVWF  33
....................       got_pulse_width = FALSE; 
0615:  BCF    2A.0
....................        
....................      // For Testing set Pulse width ms here 
....................      // pulse_width_ms = 524; 
....................        
....................       LUT_count = 1; 
0616:  MOVLW  01
0617:  MOVWF  39
....................       while   (millisecond_delay[LUT_count] >= pulse_width_ms){ 
0618:  BCF    03.0
0619:  RLF    39,W
061A:  MOVWF  3E
061B:  CALL   026
061C:  MOVWF  20
061D:  INCF   3E,W
061E:  CALL   026
061F:  MOVWF  23
0620:  MOVF   20,W
0621:  MOVWF  3E
0622:  MOVF   23,W
0623:  MOVWF  3F
0624:  MOVF   36,F
0625:  BTFSS  03.2
0626:  GOTO   637
0627:  MOVF   35,F
0628:  BTFSS  03.2
0629:  GOTO   637
062A:  MOVF   34,W
062B:  SUBWF  3F,W
062C:  BTFSS  03.0
062D:  GOTO   637
062E:  BTFSS  03.2
062F:  GOTO   634
0630:  MOVF   33,W
0631:  SUBWF  3E,W
0632:  BTFSS  03.0
0633:  GOTO   637
....................       LUT_count = LUT_count + 1; 
0634:  MOVLW  01
0635:  ADDWF  39,F
....................       } 
0636:  GOTO   618
....................       calculated_voltage = map(pulse_width_ms, millisecond_delay[LUT_count - 1], millisecond_delay[LUT_count] , dac_out[LUT_count-1],dac_out[LUT_count]); 
0637:  MOVF   36,W
0638:  MOVWF  41
0639:  MOVF   35,W
063A:  MOVWF  40
063B:  MOVF   34,W
063C:  MOVWF  3F
063D:  MOVF   33,W
063E:  MOVWF  3E
063F:  GOTO   135
0640:  MOVF   20,W
0641:  MOVWF  3E
0642:  MOVF   21,W
0643:  MOVWF  3F
0644:  MOVF   22,W
0645:  MOVWF  40
0646:  MOVF   23,W
0647:  MOVWF  41
0648:  MOVLW  01
0649:  SUBWF  39,W
064A:  MOVWF  20
064B:  BCF    03.0
064C:  RLF    20,F
064D:  MOVF   20,W
064E:  MOVWF  42
064F:  CALL   026
0650:  MOVWF  20
0651:  INCF   42,W
0652:  CALL   026
0653:  MOVWF  23
0654:  MOVF   20,W
0655:  MOVWF  4E
0656:  MOVF   23,W
0657:  MOVWF  4F
0658:  CALL   151
0659:  MOVF   20,W
065A:  MOVWF  42
065B:  MOVF   21,W
065C:  MOVWF  43
065D:  MOVF   22,W
065E:  MOVWF  44
065F:  MOVF   23,W
0660:  MOVWF  45
0661:  BCF    03.0
0662:  RLF    39,W
0663:  MOVWF  46
0664:  CALL   026
0665:  MOVWF  20
0666:  INCF   46,W
0667:  CALL   026
0668:  MOVWF  23
0669:  MOVF   20,W
066A:  MOVWF  4E
066B:  MOVF   23,W
066C:  MOVWF  4F
066D:  CALL   151
066E:  MOVF   20,W
066F:  MOVWF  46
0670:  MOVF   21,W
0671:  MOVWF  47
0672:  MOVF   22,W
0673:  MOVWF  48
0674:  MOVF   23,W
0675:  MOVWF  49
0676:  MOVLW  01
0677:  SUBWF  39,W
0678:  MOVWF  20
0679:  BCF    03.0
067A:  RLF    20,F
067B:  MOVF   20,W
067C:  MOVWF  4A
067D:  CALL   051
067E:  MOVWF  20
067F:  INCF   4A,W
0680:  CALL   051
0681:  MOVWF  23
0682:  MOVF   20,W
0683:  MOVWF  4E
0684:  MOVF   23,W
0685:  MOVWF  4F
0686:  CALL   151
0687:  MOVF   20,W
0688:  MOVWF  4A
0689:  MOVF   21,W
068A:  MOVWF  4B
068B:  MOVF   22,W
068C:  MOVWF  4C
068D:  MOVF   23,W
068E:  MOVWF  4D
068F:  BCF    03.0
0690:  RLF    39,W
0691:  MOVWF  4E
0692:  CALL   051
0693:  MOVWF  20
0694:  INCF   4E,W
0695:  CALL   051
0696:  MOVWF  23
0697:  MOVF   20,W
0698:  MOVWF  4E
0699:  MOVF   23,W
069A:  MOVWF  4F
069B:  CALL   151
069C:  MOVF   20,W
069D:  MOVWF  4E
069E:  MOVF   21,W
069F:  MOVWF  4F
06A0:  MOVF   22,W
06A1:  MOVWF  50
06A2:  MOVF   23,W
06A3:  MOVWF  51
06A4:  MOVF   41,W
06A5:  MOVWF  55
06A6:  MOVF   40,W
06A7:  MOVWF  54
06A8:  MOVF   3F,W
06A9:  MOVWF  53
06AA:  MOVF   3E,W
06AB:  MOVWF  52
06AC:  MOVF   45,W
06AD:  MOVWF  59
06AE:  MOVF   44,W
06AF:  MOVWF  58
06B0:  MOVF   43,W
06B1:  MOVWF  57
06B2:  MOVF   42,W
06B3:  MOVWF  56
06B4:  MOVF   49,W
06B5:  MOVWF  5D
06B6:  MOVF   48,W
06B7:  MOVWF  5C
06B8:  MOVF   47,W
06B9:  MOVWF  5B
06BA:  MOVF   46,W
06BB:  MOVWF  5A
06BC:  MOVF   4D,W
06BD:  MOVWF  61
06BE:  MOVF   4C,W
06BF:  MOVWF  60
06C0:  MOVF   4B,W
06C1:  MOVWF  5F
06C2:  MOVF   4A,W
06C3:  MOVWF  5E
06C4:  MOVF   23,W
06C5:  MOVWF  65
06C6:  MOVF   22,W
06C7:  MOVWF  64
06C8:  MOVF   21,W
06C9:  MOVWF  63
06CA:  MOVF   20,W
06CB:  MOVWF  62
06CC:  GOTO   2EE
06CD:  MOVF   23,W
06CE:  MOVWF  41
06CF:  MOVF   22,W
06D0:  MOVWF  40
06D1:  MOVF   21,W
06D2:  MOVWF  3F
06D3:  MOVF   20,W
06D4:  MOVWF  3E
06D5:  GOTO   52C
06D6:  MOVF   22,W
06D7:  MOVWF  38
06D8:  MOVF   21,W
06D9:  MOVWF  37
....................        
....................        
....................      // printf("%lu ms \n\r", pulse_width_ms); //Debug Message 
....................      // printf("%lu dac \n\r", calculated_voltage); //Debug Message 
....................       setVoltage(calculated_voltage,FALSE); 
06DA:  MOVF   38,W
06DB:  MOVWF  41
06DC:  MOVF   37,W
06DD:  MOVWF  40
06DE:  CLRF   42
06DF:  CALL   0D7
....................       mode = 0; //Set Mode to tap mode, requires larger movement of POT to break out 
06E0:  BCF    2A.2
....................      }  
....................   }  
06E1:  GOTO   5B3
....................  
.................... } 
06E2:  SLEEP

Configuration Fuses:
   Word  1: 3F84   INTRC_IO NOWDT PUT NOMCLR NOPROTECT NOCPD BROWNOUT NOCLKOUT IESO FCMEN
   Word  2: 1EFF   NOWRT PLL_SW STVREN BORV19 NODEBUG NOLVP
