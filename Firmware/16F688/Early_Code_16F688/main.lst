CCS PCM C Compiler, Version 4.128, 8430               06-Sep-13 14:55

               Filename: C:\Users\Kim\Desktop\EAR\16F688-MicroCode-V1\main.lst

               ROM used: 230 words (6%)
                         Largest free fragment is 2048
               RAM used: 7 (3%) at main() level
                         7 (3%) worst case
               Stack:    0 locations

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   004
0003:  NOP
.................... #include <16F688.h> 
.................... //////// Standard Header file for the PIC16F688 device //////////////// 
.................... #device PIC16F688 
.................... #list 
....................  
.................... //#device adc=10 
.................... #use delay(clock=8000000) 
.................... #fuses NOWDT,INTRC_IO, NOPROTECT, BROWNOUT, NOMCLR, NOCPD, PUT, NOIESO, NOFCMEN 
.................... //#use rs232(baud=9600,parity=N,xmit=PIN_C4,rcv=PIN_C5,bits=9) 
....................  
.................... #define LED0 PIN_C5 
.................... #define LED1 PIN_C4 
.................... #define LED2 PIN_C3 
....................  
.................... #define button0 PIN_C2 
.................... #define button1 PIN_C1 
.................... #define button2 PIN_C0 
....................  
.................... int1 state0,state1,state2; 
....................  
....................  
.................... void main(){ 
0004:  CLRF   04
0005:  BCF    03.7
0006:  MOVLW  1F
0007:  ANDWF  03,F
0008:  BCF    1F.6
0009:  MOVLW  00
000A:  BSF    03.5
000B:  MOVWF  11
000C:  BCF    03.5
000D:  CLRF   1A
000E:  MOVLW  07
000F:  MOVWF  19
....................    setup_oscillator( OSC_8MHZ ); 
0010:  MOVLW  71
0011:  BSF    03.5
0012:  MOVWF  0F
0013:  MOVF   0F,W
....................    //setup_adc_ports(sAN6|VSS_VDD); 
....................    setup_adc(ADC_CLOCK_INTERNAL); 
0014:  BSF    1F.4
0015:  BSF    1F.5
0016:  BCF    1F.6
0017:  BCF    03.5
0018:  BCF    1F.7
0019:  BSF    1F.0
....................    //setup_counters(RTCC_INTERNAL,RTCC_DIV_1); 
....................    //setup_timer_1(T1_DISABLED); 
....................    setup_comparator(NC_NC_NC_NC); 
001A:  CLRF   1A
001B:  MOVLW  07
001C:  MOVWF  19
001D:  BSF    03.5
001E:  MOVF   05,W
001F:  MOVWF  05
0020:  MOVLW  06
0021:  BCF    03.5
0022:  MOVWF  20
0023:  DECFSZ 20,F
0024:  GOTO   023
0025:  NOP
0026:  MOVF   19,W
0027:  BCF    0C.3
....................    setup_vref(FALSE); 
0028:  BSF    03.5
0029:  CLRF   19
....................  
.................... state0 = read_eeprom (0); 
002A:  CLRF   1B
002B:  BCF    1C.7
002C:  BSF    1C.0
002D:  MOVF   1A,W
002E:  BCF    03.5
002F:  MOVWF  21
0030:  BCF    24.0
0031:  BTFSC  21.0
0032:  BSF    24.0
.................... state1 = read_eeprom (1); 
0033:  MOVLW  01
0034:  BSF    03.5
0035:  MOVWF  1B
0036:  BCF    1C.7
0037:  BSF    1C.0
0038:  MOVF   1A,W
0039:  BCF    03.5
003A:  MOVWF  21
003B:  BCF    24.1
003C:  BTFSC  21.0
003D:  BSF    24.1
.................... state2 = read_eeprom (2); 
003E:  MOVLW  02
003F:  BSF    03.5
0040:  MOVWF  1B
0041:  BCF    1C.7
0042:  BSF    1C.0
0043:  MOVF   1A,W
0044:  BCF    03.5
0045:  MOVWF  21
0046:  BCF    24.2
0047:  BTFSC  21.0
0048:  BSF    24.2
....................  
.................... //Test the LEDs 
.................... /* 
.................... while (1){ 
.................... output_low(LED0); 
.................... output_low(LED1); 
.................... output_low(LED2); 
.................... delay_ms(1000); 
.................... output_high(LED0); 
.................... output_high(LED1); 
.................... output_high(LED2); 
.................... delay_ms(1000); 
.................... } 
.................... */ 
....................  
.................... //The LEDs are an active High because of the NPN transistor driving the low side 
.................... if (state0 == 1) 
0049:  BTFSS  24.0
004A:  GOTO   04F
.................... output_high(LED0); 
004B:  BSF    03.5
004C:  BCF    07.5
004D:  BCF    03.5
004E:  BSF    07.5
....................  
.................... if (state1 == 1) 
004F:  BTFSS  24.1
0050:  GOTO   055
.................... output_high(LED1); 
0051:  BSF    03.5
0052:  BCF    07.4
0053:  BCF    03.5
0054:  BSF    07.4
....................  
.................... if (state2 == 1) 
0055:  BTFSS  24.2
0056:  GOTO   05B
.................... output_high(LED2); 
0057:  BSF    03.5
0058:  BCF    07.3
0059:  BCF    03.5
005A:  BSF    07.3
....................  
.................... //The buttons are an active high to avoid problems with powerdown causing false triggers 
.................... // 
....................    while(true) 
....................    { 
....................     
....................       if(input(button0)){ 
005B:  BSF    03.5
005C:  BSF    07.2
005D:  BCF    03.5
005E:  BTFSS  07.2
005F:  GOTO   088
....................          //Toggle the LED 
....................          output_toggle(LED0); 
0060:  BSF    03.5
0061:  BCF    07.5
0062:  MOVLW  20
0063:  BCF    03.5
0064:  XORWF  07,F
....................          while (input(button0)){} //Stay right here until button is released 
0065:  BSF    03.5
0066:  BSF    07.2
0067:  BCF    03.5
0068:  BTFSC  07.2
0069:  GOTO   065
....................          //We know button was pressed and released 
....................          state0 = !state0; 
006A:  MOVLW  01
006B:  XORWF  24,F
....................          write_eeprom(0, state0); 
006C:  MOVLW  00
006D:  BTFSC  24.0
006E:  MOVLW  01
006F:  MOVWF  25
0070:  BSF    03.5
0071:  CLRF   1B
0072:  BCF    03.5
0073:  MOVF   25,W
0074:  BSF    03.5
0075:  MOVWF  1A
0076:  BCF    1C.7
0077:  BSF    1C.2
0078:  BCF    03.5
0079:  MOVF   0B,W
007A:  MOVWF  20
007B:  BCF    0B.7
007C:  BSF    03.5
007D:  MOVLW  55
007E:  MOVWF  1D
007F:  MOVLW  AA
0080:  MOVWF  1D
0081:  BSF    1C.1
0082:  BTFSC  1C.1
0083:  GOTO   082
0084:  BCF    1C.2
0085:  BCF    03.5
0086:  MOVF   20,W
0087:  IORWF  0B,F
....................          
....................       } 
....................     
....................       if(input(button1)){ 
0088:  BSF    03.5
0089:  BSF    07.1
008A:  BCF    03.5
008B:  BTFSS  07.1
008C:  GOTO   0B6
....................          //Toggle the LED 
....................          output_toggle(LED1); 
008D:  BSF    03.5
008E:  BCF    07.4
008F:  MOVLW  10
0090:  BCF    03.5
0091:  XORWF  07,F
....................          while (input(button1)){} //Stay right here until button is released 
0092:  BSF    03.5
0093:  BSF    07.1
0094:  BCF    03.5
0095:  BTFSC  07.1
0096:  GOTO   092
....................          //We know button was pressed and released 
....................          state1 = !state1; 
0097:  MOVLW  02
0098:  XORWF  24,F
....................          write_eeprom(1, state1); 
0099:  MOVLW  00
009A:  BTFSC  24.1
009B:  MOVLW  01
009C:  MOVWF  25
009D:  MOVLW  01
009E:  BSF    03.5
009F:  MOVWF  1B
00A0:  BCF    03.5
00A1:  MOVF   25,W
00A2:  BSF    03.5
00A3:  MOVWF  1A
00A4:  BCF    1C.7
00A5:  BSF    1C.2
00A6:  BCF    03.5
00A7:  MOVF   0B,W
00A8:  MOVWF  20
00A9:  BCF    0B.7
00AA:  BSF    03.5
00AB:  MOVLW  55
00AC:  MOVWF  1D
00AD:  MOVLW  AA
00AE:  MOVWF  1D
00AF:  BSF    1C.1
00B0:  BTFSC  1C.1
00B1:  GOTO   0B0
00B2:  BCF    1C.2
00B3:  BCF    03.5
00B4:  MOVF   20,W
00B5:  IORWF  0B,F
....................           
....................       } 
....................        
....................       if( input(button2) ){ 
00B6:  BSF    03.5
00B7:  BSF    07.0
00B8:  BCF    03.5
00B9:  BTFSS  07.0
00BA:  GOTO   0E4
....................          output_toggle(LED2); 
00BB:  BSF    03.5
00BC:  BCF    07.3
00BD:  MOVLW  08
00BE:  BCF    03.5
00BF:  XORWF  07,F
....................          while (input(button2)){} //Stay right here until button is released 
00C0:  BSF    03.5
00C1:  BSF    07.0
00C2:  BCF    03.5
00C3:  BTFSC  07.0
00C4:  GOTO   0C0
....................          //We know button was pressed and released 
....................          state2 = !state2; 
00C5:  MOVLW  04
00C6:  XORWF  24,F
....................          write_eeprom(2, state2); 
00C7:  MOVLW  00
00C8:  BTFSC  24.2
00C9:  MOVLW  01
00CA:  MOVWF  25
00CB:  MOVLW  02
00CC:  BSF    03.5
00CD:  MOVWF  1B
00CE:  BCF    03.5
00CF:  MOVF   25,W
00D0:  BSF    03.5
00D1:  MOVWF  1A
00D2:  BCF    1C.7
00D3:  BSF    1C.2
00D4:  BCF    03.5
00D5:  MOVF   0B,W
00D6:  MOVWF  20
00D7:  BCF    0B.7
00D8:  BSF    03.5
00D9:  MOVLW  55
00DA:  MOVWF  1D
00DB:  MOVLW  AA
00DC:  MOVWF  1D
00DD:  BSF    1C.1
00DE:  BTFSC  1C.1
00DF:  GOTO   0DE
00E0:  BCF    1C.2
00E1:  BCF    03.5
00E2:  MOVF   20,W
00E3:  IORWF  0B,F
....................           
....................           
....................       } 
....................    } 
00E4:  GOTO   05B
....................  
.................... } 
00E5:  SLEEP

Configuration Fuses:
   Word  1: 33C4   INTRC_IO NOWDT PUT NOMCLR NOPROTECT NOCPD BROWNOUT NOIESO NOFCMEN
